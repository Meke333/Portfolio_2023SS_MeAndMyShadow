//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/InputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""ShadowControls"",
            ""id"": ""8f81a4e2-8edb-41ab-b9aa-da5dc6a3a7dc"",
            ""actions"": [
                {
                    ""name"": ""Shadow_Movement"",
                    ""type"": ""Value"",
                    ""id"": ""d2e505f4-00bb-4c3b-bf54-0f3ab546673f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shadow_Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ab3bb930-6d76-43fc-a044-7c1b3cf03522"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8a9c3118-3840-4464-9625-0935936a513b"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Shadow_Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""27357ddc-fafc-47ca-a852-7d7445641a1e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shadow_Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""698ef9ca-2501-432a-9b3f-8a3374b0b50d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Shadow_Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ffd008f9-25ee-4da1-9fab-10feeae6b24b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Shadow_Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""83a6fe14-8180-446b-bce8-711da6f40146"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Shadow_Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""be8d364e-6b99-4bd8-9960-f6a8ca4946bf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Shadow_Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d7193913-9827-46ca-b397-52c03cb92bda"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Shadow_Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4efbf421-e4af-4d0c-bdeb-acea54d8e90e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Shadow_Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MouseControls"",
            ""id"": ""f2f85bd5-93ee-49a7-b61b-0effcf907671"",
            ""actions"": [
                {
                    ""name"": ""Mouse_Click"",
                    ""type"": ""Button"",
                    ""id"": ""53a5e514-ca9e-4f40-9e97-7b891204824b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse_Scale"",
                    ""type"": ""Value"",
                    ""id"": ""6448adf7-0032-4a6a-824a-ee17a36318fe"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse_Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""8ebcdee3-2555-46cf-b369-cbb12e967ba3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ecbb932d-7c4a-4e01-a49e-e096309d75a2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Mouse_Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b5c193e-710f-49cf-9aa4-922b2885ee54"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Mouse_Scale"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""94b86765-2d8a-4ae8-a59b-d13af7c4c1e7"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse_Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""df3ccd46-dd30-4369-b8ff-6f67775ff3fb"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Mouse_Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""98041a04-8555-425c-a65e-f7ef57d329d9"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Mouse_Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PauseMenu"",
            ""id"": ""c2ca7686-845b-4370-af4a-61636ea13369"",
            ""actions"": [
                {
                    ""name"": ""TogglePauseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""0573293a-9741-4caa-b3c3-58b8f0acf6c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Navigation"",
                    ""type"": ""Value"",
                    ""id"": ""85a44cc0-b240-488a-b22e-6353777baaee"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""80e5bea8-b88a-42e2-a3b2-cc7d8c93bd6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""c0a0acd5-90e7-40bc-9d2c-4da9d65740a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f3a5ca38-55ed-4cae-9d11-78bd01a53f10"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""TogglePauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e2ade46-98fa-467d-9ebb-b9331013180d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""TogglePauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9f6bb3a-9d2f-4604-8360-504dfb30d620"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""c1f4079f-14bf-4e27-9a7b-f07e39086df1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7d71775d-e31a-4087-bd4f-86415ebcb8e3"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""21e0f01f-01e4-4a4c-9210-ef5e0409f822"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""422eee33-9321-4c00-89ff-bed200e1a2b4"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8c706b3b-f7a9-49b0-8796-08c793ee2c39"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""98adfa2c-c310-4a6e-8650-3d6ff05fd5c2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52d3b940-8b6e-4e51-be57-9fd8e7828802"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // ShadowControls
        m_ShadowControls = asset.FindActionMap("ShadowControls", throwIfNotFound: true);
        m_ShadowControls_Shadow_Movement = m_ShadowControls.FindAction("Shadow_Movement", throwIfNotFound: true);
        m_ShadowControls_Shadow_Jump = m_ShadowControls.FindAction("Shadow_Jump", throwIfNotFound: true);
        // MouseControls
        m_MouseControls = asset.FindActionMap("MouseControls", throwIfNotFound: true);
        m_MouseControls_Mouse_Click = m_MouseControls.FindAction("Mouse_Click", throwIfNotFound: true);
        m_MouseControls_Mouse_Scale = m_MouseControls.FindAction("Mouse_Scale", throwIfNotFound: true);
        m_MouseControls_Mouse_Rotate = m_MouseControls.FindAction("Mouse_Rotate", throwIfNotFound: true);
        // PauseMenu
        m_PauseMenu = asset.FindActionMap("PauseMenu", throwIfNotFound: true);
        m_PauseMenu_TogglePauseMenu = m_PauseMenu.FindAction("TogglePauseMenu", throwIfNotFound: true);
        m_PauseMenu_Navigation = m_PauseMenu.FindAction("Navigation", throwIfNotFound: true);
        m_PauseMenu_Confirm = m_PauseMenu.FindAction("Confirm", throwIfNotFound: true);
        m_PauseMenu_Cancel = m_PauseMenu.FindAction("Cancel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ShadowControls
    private readonly InputActionMap m_ShadowControls;
    private List<IShadowControlsActions> m_ShadowControlsActionsCallbackInterfaces = new List<IShadowControlsActions>();
    private readonly InputAction m_ShadowControls_Shadow_Movement;
    private readonly InputAction m_ShadowControls_Shadow_Jump;
    public struct ShadowControlsActions
    {
        private @PlayerInput m_Wrapper;
        public ShadowControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shadow_Movement => m_Wrapper.m_ShadowControls_Shadow_Movement;
        public InputAction @Shadow_Jump => m_Wrapper.m_ShadowControls_Shadow_Jump;
        public InputActionMap Get() { return m_Wrapper.m_ShadowControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShadowControlsActions set) { return set.Get(); }
        public void AddCallbacks(IShadowControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ShadowControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShadowControlsActionsCallbackInterfaces.Add(instance);
            @Shadow_Movement.started += instance.OnShadow_Movement;
            @Shadow_Movement.performed += instance.OnShadow_Movement;
            @Shadow_Movement.canceled += instance.OnShadow_Movement;
            @Shadow_Jump.started += instance.OnShadow_Jump;
            @Shadow_Jump.performed += instance.OnShadow_Jump;
            @Shadow_Jump.canceled += instance.OnShadow_Jump;
        }

        private void UnregisterCallbacks(IShadowControlsActions instance)
        {
            @Shadow_Movement.started -= instance.OnShadow_Movement;
            @Shadow_Movement.performed -= instance.OnShadow_Movement;
            @Shadow_Movement.canceled -= instance.OnShadow_Movement;
            @Shadow_Jump.started -= instance.OnShadow_Jump;
            @Shadow_Jump.performed -= instance.OnShadow_Jump;
            @Shadow_Jump.canceled -= instance.OnShadow_Jump;
        }

        public void RemoveCallbacks(IShadowControlsActions instance)
        {
            if (m_Wrapper.m_ShadowControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShadowControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ShadowControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShadowControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShadowControlsActions @ShadowControls => new ShadowControlsActions(this);

    // MouseControls
    private readonly InputActionMap m_MouseControls;
    private List<IMouseControlsActions> m_MouseControlsActionsCallbackInterfaces = new List<IMouseControlsActions>();
    private readonly InputAction m_MouseControls_Mouse_Click;
    private readonly InputAction m_MouseControls_Mouse_Scale;
    private readonly InputAction m_MouseControls_Mouse_Rotate;
    public struct MouseControlsActions
    {
        private @PlayerInput m_Wrapper;
        public MouseControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouse_Click => m_Wrapper.m_MouseControls_Mouse_Click;
        public InputAction @Mouse_Scale => m_Wrapper.m_MouseControls_Mouse_Scale;
        public InputAction @Mouse_Rotate => m_Wrapper.m_MouseControls_Mouse_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_MouseControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseControlsActions set) { return set.Get(); }
        public void AddCallbacks(IMouseControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseControlsActionsCallbackInterfaces.Add(instance);
            @Mouse_Click.started += instance.OnMouse_Click;
            @Mouse_Click.performed += instance.OnMouse_Click;
            @Mouse_Click.canceled += instance.OnMouse_Click;
            @Mouse_Scale.started += instance.OnMouse_Scale;
            @Mouse_Scale.performed += instance.OnMouse_Scale;
            @Mouse_Scale.canceled += instance.OnMouse_Scale;
            @Mouse_Rotate.started += instance.OnMouse_Rotate;
            @Mouse_Rotate.performed += instance.OnMouse_Rotate;
            @Mouse_Rotate.canceled += instance.OnMouse_Rotate;
        }

        private void UnregisterCallbacks(IMouseControlsActions instance)
        {
            @Mouse_Click.started -= instance.OnMouse_Click;
            @Mouse_Click.performed -= instance.OnMouse_Click;
            @Mouse_Click.canceled -= instance.OnMouse_Click;
            @Mouse_Scale.started -= instance.OnMouse_Scale;
            @Mouse_Scale.performed -= instance.OnMouse_Scale;
            @Mouse_Scale.canceled -= instance.OnMouse_Scale;
            @Mouse_Rotate.started -= instance.OnMouse_Rotate;
            @Mouse_Rotate.performed -= instance.OnMouse_Rotate;
            @Mouse_Rotate.canceled -= instance.OnMouse_Rotate;
        }

        public void RemoveCallbacks(IMouseControlsActions instance)
        {
            if (m_Wrapper.m_MouseControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseControlsActions @MouseControls => new MouseControlsActions(this);

    // PauseMenu
    private readonly InputActionMap m_PauseMenu;
    private List<IPauseMenuActions> m_PauseMenuActionsCallbackInterfaces = new List<IPauseMenuActions>();
    private readonly InputAction m_PauseMenu_TogglePauseMenu;
    private readonly InputAction m_PauseMenu_Navigation;
    private readonly InputAction m_PauseMenu_Confirm;
    private readonly InputAction m_PauseMenu_Cancel;
    public struct PauseMenuActions
    {
        private @PlayerInput m_Wrapper;
        public PauseMenuActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @TogglePauseMenu => m_Wrapper.m_PauseMenu_TogglePauseMenu;
        public InputAction @Navigation => m_Wrapper.m_PauseMenu_Navigation;
        public InputAction @Confirm => m_Wrapper.m_PauseMenu_Confirm;
        public InputAction @Cancel => m_Wrapper.m_PauseMenu_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_PauseMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseMenuActions set) { return set.Get(); }
        public void AddCallbacks(IPauseMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Add(instance);
            @TogglePauseMenu.started += instance.OnTogglePauseMenu;
            @TogglePauseMenu.performed += instance.OnTogglePauseMenu;
            @TogglePauseMenu.canceled += instance.OnTogglePauseMenu;
            @Navigation.started += instance.OnNavigation;
            @Navigation.performed += instance.OnNavigation;
            @Navigation.canceled += instance.OnNavigation;
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
        }

        private void UnregisterCallbacks(IPauseMenuActions instance)
        {
            @TogglePauseMenu.started -= instance.OnTogglePauseMenu;
            @TogglePauseMenu.performed -= instance.OnTogglePauseMenu;
            @TogglePauseMenu.canceled -= instance.OnTogglePauseMenu;
            @Navigation.started -= instance.OnNavigation;
            @Navigation.performed -= instance.OnNavigation;
            @Navigation.canceled -= instance.OnNavigation;
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
        }

        public void RemoveCallbacks(IPauseMenuActions instance)
        {
            if (m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPauseMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_PauseMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PauseMenuActions @PauseMenu => new PauseMenuActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IShadowControlsActions
    {
        void OnShadow_Movement(InputAction.CallbackContext context);
        void OnShadow_Jump(InputAction.CallbackContext context);
    }
    public interface IMouseControlsActions
    {
        void OnMouse_Click(InputAction.CallbackContext context);
        void OnMouse_Scale(InputAction.CallbackContext context);
        void OnMouse_Rotate(InputAction.CallbackContext context);
    }
    public interface IPauseMenuActions
    {
        void OnTogglePauseMenu(InputAction.CallbackContext context);
        void OnNavigation(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
}
